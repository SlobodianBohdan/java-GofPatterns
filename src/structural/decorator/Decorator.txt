
        Decorator — структурний шаблон проєктування, призначений для динамічного підключення додаткових можливостей до
    об'єкта. Шаблон Decorator надає гнучку альтернативу методу визначення підкласів з метою розширення функціональності.

----------------------------------------------------------------------------------------------------------------------

        Завдання:
    Об'єкт, який передбачається використовувати, виконує основні функції. Проте може виникнути потреба додати до
    нього деяку додаткову функціональність, яка виконуватиметься до і/або після основної функціональності об'єкта.

        Спосіб вирішення:
    Декоратор передбачає розширення функціональності об'єкта без визначення підкласів.

----------------------------------------------------------------------------------------------------------------------

        Переваги:
    - Декоратори забезпечують гнучку альтернативу підкласу для розширення функціональності
    - Декоратори дозволяють модифікувати поведінку під час виконання, а не повертатися до існуючого коду
      та вносити зміни
    - Декоратори - це хороше рішення для перестановки завдань, тому що ви можете загорнути компонент з будь-якою
      кількістю декораторів
    - Шаблон декоратора підтримує принцип, що класи повинні бути відкриті для розширення, але закриті для модифікації

        Недоліки:
    - Декоратори можуть призвести до багатьох невеликих об'єктів у нашому дизайні, і надмірне використання може
      бути складним
    - Декоратори можуть викликати проблеми, якщо клієнт сильно залежить від компонентів конкретного типу
    - Декоратори можуть ускладнити процес аналізу компонента, оскільки вам потрібно не лише інвентувати компонент,
      але і обернути його кількома декораторами
    - Може бути складно, щоб декоратори відслідковували інших декораторів, тому що повертатися назад до декількох
      шарів ланцюга декораторів починає натискати шаблон декоратора

----------------------------------------------------------------------------------------------------------------------

        Реалізація:
    Створюється абстрактний клас, що представляє як початковий клас, так і нові функції, що додаються в клас.
    У класах-декораторах нові функції викликаються в необхідній послідовності — до або після виклику подальшого об'єкта.

----------------------------------------------------------------------------------------------------------------------

