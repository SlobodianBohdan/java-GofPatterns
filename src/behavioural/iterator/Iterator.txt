
        Iterator — шаблон проєктування, належить до класу шаблонів поведінки. Надає спосіб послідовного
    доступу до всіх елементів складеного об'єкта, не розкриваючи його внутрішнього налаштування.

---------------------------------------------------------------------------------------------------------
    Коли варто застосовувати даний шабллон:

        Складений об'єкт, скажімо список, повинен надавати спосіб доступу до своїх елементів, не розкриваючи
    їхню внутрішню структуру. Більш того, іноді треба обходити список по-різному, у залежності від задачі,
    що вирішується. При цьому немає ніякого бажання засмічувати інтерфейс класу. Список усілякими операціями
    для усіх потрібних варіантів обходу, навіть якщо їх усі можна передбачити заздалегідь. Крім того, іноді
    треба, щоб в один момент часу існувало декілька активних операцій обходу списку.
        Все це призводить до необхідності реалізації шаблону Ітератор. Його основна ідея у тому, щоб
    за доступ до елементів та обхід списку відповідав не сам список, а окремий об'єкт-ітератор. У класі
    Ітератор означений інтерфейс для доступу до елементів списку. Об'єкт цього класу прослідковує поточний
    елемент, тобто він володіє інформацією, які з елементів вже відвідувались.

---------------------------------------------------------------------------------------------------------

        Можна використовувати шаблон Ітератор у випадках:

    - для доступу до змісту агрегованих об'єктів не розкриваючи їхнє внутрішнє улаштування;
    - для підтримки декількох активних обходів одного й того ж агрегованого об'єкта;
    - для подання уніфікованого інтерфейсу з метою обходу різноманітних агрегованих структур
      (тобто для підтримки поліморфної ітерації).


---------------------------------------------------------------------------------------------------------

        Можна використовувати шаблон Ітератор у випадках:

    - для доступу до змісту агрегованих об'єктів не розкриваючи їхнє внутрішнє улаштування;
    - для підтримки декількох активних обходів одного й того ж агрегованого об'єкта;
    - для подання уніфікованого інтерфейсу з метою обходу різноманітних агрегованих структур
      (тобто для підтримки поліморфної ітерації).



---------------------------------------------------------------------------------------------------------

        Переваги:
    - спільний інтерфейс використання
    - перебір колекції

        Недоліки:
    - основною проблемою ітераторів є те, що реалізація ітераторів може бути складною