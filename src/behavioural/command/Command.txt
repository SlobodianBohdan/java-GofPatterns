
        Command — шаблон проєктування, відноситься до класу шаблонів поведінки. Також відомий як Дія (англ. Action),
    Транзакція (англ. Transaction).

-----------------------------------------------------------------------------------------------------------------------

        Призначення:
    Інкапсулює запит у формі об'єкта, дозволяючи тим самим задавати параметри клієнтів для обробки відповідних запитів,
    ставити запити у чергу або протоколювати їх, а також підтримувати скасовування операцій.

-----------------------------------------------------------------------------------------------------------------------

        Мотивація:
    Створення структури, в якій клас-відправник і клас-отримувач не залежать один від одного напряму. Організація
    зворотного виклику до класу, який містить у собі клас-відправник.

-----------------------------------------------------------------------------------------------------------------------

        Слід використовувати шаблон Command коли:

    - треба параметризувати об'єкти дією. У процедурній мові таку параметризацію можна виразити за допомогою функції
      зворотнього виклику, тобто такою функцією, яка реєструється, щоби бути викликаною пізніше. Команди є
      об'єктно-орієнтованою альтернативою функціям зворотньогоо виклику;
    - визначати, ставити у чергу та виконувати запити у різний час. Термін життя об'єкта Команда не обов'язково залежить
      від терміну життя початкового запиту. Якщо отримувача вдається реалізувати таким чином, щоб він не залежав від
      адресного простору, то об'єкт-команду можна передати іншому процесу, який займеться його виконанням;
    - потрібна підтримка скасовування операцій. Операція Execute об'єкта Команда може зберегти стан, що необхідний
      для скасування дій, виконаних Командою. У цьому разі у інтерфейсі класу Command повинна бути додаткова
      операція Unexecute, котра скасовує дії, виконанні попереднім викликом операції Execute. Виконані команди
      зберігаються у списку історії. Для реалізації довільної кількості рівней скасування та повтору команд треба
      обходити цей список відповідно в зворотньому та прямому напрямках, викликаючи під час відвідування кожного
      елементу операцію Unexecute або Execute;
    - підтримати протоколювання змін, щоб їх можна було виконати повторно після аварійної зупинки системи. Доповнивши
      інтерфейс класу Command операціями зберігання та завантаження, можна вести протокол змін у внутрішній пам'яті.
      Для відновлення після збою треба буде завантажити збереженні команди з диску та повторно виконати їх за допомогою
      операції Execute;
    - треба структурувати систему на основі високорівневих операцій, що побудовані з примітивних. Така структура є
      типовою для інформаційних систем, що підтримують транзакції. Транзакція інкапсулює множину змін даних. Шаблон
      Command дозволяє моделювати транзакції. В усіх команд є спільний інтерфейс, що надає можливість працювати
      однаково з будь-якими транзакціями. За допомогою цього шаблону можна легко додавати у систему нові види транзакцій.



-----------------------------------------------------------------------------------------------------------------------

        Переваги:
    - Відокремлює класи, які викликають операцію від об'єкта, який вміє виконувати операцію
    - Дозволяє створювати послідовність команд за допомогою системи черги
    - Розширення для додавання нової команди є простими і можуть бути виконані без зміни існуючого коду
    - Ви також можете визначити систему відкату з командним шаблоном, наприклад, у прикладі майстра,
      ми можемо написати метод відкату

        Недоліки:
    - Збільшення кількості класів для кожної окремої команди

-----------------------------------------------------------------------------------------------------------------------